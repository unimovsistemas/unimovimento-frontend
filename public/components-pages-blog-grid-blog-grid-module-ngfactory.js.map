{"version":3,"sources":["./src/app/components/shared/blog-sidebar/blog-sidebar.component.ts","./src/app/components/shared/blog-sidebar/blog-sidebar.component.html","./src/app/components/pages/blog-grid/blog-grid.component.ts","./src/app/components/pages/blog-grid/content/content.component.html","./node_modules/ngx-pagination/dist/ngx-pagination.d.ts.PaginationControlsComponent.html","./src/app/components/pages/blog-grid/blog-grid.module.ts","./src/app/components/pages/blog-grid/blog-grid.component.html","./src/app/components/pages/blog-grid/blog-grid-routing.module.ts","./node_modules/ngx-pagination/dist/ngx-pagination.js","./src/app/components/pages/blog-grid/content/content.component.ts"],"names":[],"mappings":"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BAAqC,IACrC,ylBAA+H,IAC/H,ypBAA2B,IAC3B,8KAES,KADL,uqBAAyB,yBAJ7B,YAAqC,GACpB,8BAAyB,EAAC,2BAAyB,EAAC,+CAAuC,EAA5G,YAA+H,EAA9G,SAAyB,EAAC,SAAyB,EAAC,SAAuC,GAC5G,YAA2B,GAEvB,YAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACF7B;AAAA;AAAA;AAA0D;AAE1D,MAAM,MAAM,GAAW,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,sEAAiB,EAAE,CAAC,CAAC;AAM7D,MAAM,qBAAqB;CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiK;AAClH;;AAE/C;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8CAA8C,EAAE;AAC5G;AACA;AACA,QAAQ,0DAAI;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,izBAAizB,iBAAiB,+BAA+B,yBAAyB,2FAA2F,iBAAiB,+BAA+B,yBAAyB,mGAAmG,kBAAkB,KAAK,mBAAmB,mLAAmL,iOAAiO,yBAAyB,kCAAkC,kEAAkE,6IAA6I,4BAA4B,kCAAkC,kEAAkE,wVAAwV,aAAa,+BAA+B,yBAAyB,2FAA2F,aAAa,+BAA+B,yBAAyB;AACtgF,yCAAyC,mBAAmB,wBAAwB,EAAE,qDAAqD,mBAAmB,qBAAqB,EAAE,4BAA4B,kBAAkB,EAAE,wBAAwB,6BAA6B,gCAAgC,4BAA4B,8BAA8B,uBAAuB,EAAE,wBAAwB,4BAA4B,EAAE,kDAAkD,qBAAqB,sBAAsB,kCAAkC,uBAAuB,EAAE,kEAAkE,4BAA4B,EAAE,8BAA8B,kCAAkC,0BAA0B,qBAAqB,sBAAsB,EAAE,+BAA+B,kCAAkC,qBAAqB,sBAAsB,EAAE,wCAAwC,gCAAgC,EAAE,+CAA+C,sBAAsB,EAAE,4GAA4G,uBAAuB,0BAA0B,yBAAyB,EAAE,kGAAkG,sBAAsB,0BAA0B,wBAAwB,EAAE,kCAAkC,kCAAkC,eAAe,gBAAgB,qBAAqB,2BAA2B,EAAE,iCAAiC,kBAAkB,EAAE,wCAAwC,8CAA8C,4BAA4B,EAAE,uGAAuG,oBAAoB,EAAE,GAAG;;AAEn2D;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C,wCAAwC,0DAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAM;AACd,oCAAoC,0DAAY;AAChD;AACA;AACA,QAAQ,4DAAM;AACd,oCAAoC,0DAAY;AAChD;AACA;AACA,QAAQ,+DAAS;AACjB;AACA;AACA;AACA,6BAA6B,qEAAuB;AACpD,2BAA2B,+DAAiB;AAC5C,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C,wCAAwC,0DAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,2DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAM;AACd,oCAAoC,0DAAY;AAChD;AACA;AACA,QAAQ,4DAAM;AACd,oCAAoC,0DAAY;AAChD;AACA;AACA,QAAQ,+DAAS;AACjB;AACA;AACA,SAAS;AACT;AACA,YAAY,+DAAiB;AAC7B;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAQ;AAChB,sBAAsB,4DAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEwK;;;;;;;;;;;;;ACrmBxK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuF;;;;AAOhF,MAAM,gBAAiB,SAAQ,oGAAiB","file":"components-pages-blog-grid-blog-grid-module-ngfactory.js","sourcesContent":["import { Component } from '@angular/core';\nimport { BlogHelperService } from '../../helper/blog/blog-helper.service';\nimport data from '../../data/feeds.json';\nimport insta from '../../data/insta.json';\n\n@Component({\n  selector: 'app-blog-sidebar',\n  templateUrl: './blog-sidebar.component.html',\n  styleUrls: ['./blog-sidebar.component.css']\n})\nexport class BlogSidebarComponent extends BlogHelperService {\n  public feeds = data;\n  public instagram = insta;\n}\n\n","<div class=\"sidebar\">\n    <!-- Search Widget Start -->\n    <div class=\"sidebar-widget widget-search\">\n        <h5 class=\"widget-title\">Search</h5>\n        <form (ngSubmit)=\"onSubmit()\" method=\"GET\">\n            <div class=\"sigma_search-adv-input\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Search Posts\" name=\"searchText\"\n                    [(ngModel)]=\"searchText\" required>\n                <button type=\"submit\"><i class=\"fa fa-search\"></i></button>\n            </div>\n        </form>\n    </div>\n    <!-- Search Widget End -->\n    <!-- Popular Feed Start -->\n    <div class=\"sidebar-widget widget-recent-posts\">\n        <h5 class=\"widget-title\">Recent Posts</h5>\n        <!-- Data -->\n        <article class=\"sigma_recent-post\" *ngFor=\"let item of getRecentPost()\">\n            <a routerLink=\"/blog-details/{{item.id}}\"><img [src]=\"item.image[0]\" [alt]=\"item.title\"></a>\n            <div class=\"sigma_recent-post-body\">\n                <h6> <a routerLink=\"/blog-details/{{item.id}}\">{{item.title}}</a> </h6>\n                <a routerLink=\"/blog-details/{{item.id}}\"> <i class=\"far fa-calendar\"></i> {{item.postdate}}</a>\n            </div>\n        </article>\n        <!-- Data -->\n    </div>\n    <!-- Popular Feed End -->\n    <!-- Categories Start -->\n    <div class=\"sidebar-widget widget-categories\">\n        <h5 class=\"widget-title\"> Our Categories </h5>\n        <ul class=\"sidebar-widget-list\">\n            <!-- Data -->\n            <li *ngFor=\"let item of category\">\n                <a routerLink=\"/blog/cat/{{item.id}}\">{{item.title}}<span>{{item.count}}</span></a>\n            </li>\n            <!-- Data -->\n        </ul>\n    </div>\n    <!-- Categories End -->\n    <!-- Social Media Start -->\n    <div class=\"sidebar-widget\">\n        <h5 class=\"widget-title\">Never Miss Out</h5>\n        <ul class=\"sigma_sm square light\">\n            <li>\n                <a href=\"#\">\n                    <i class=\"fab fa-facebook-f\"></i>\n                </a>\n            </li>\n            <li>\n                <a href=\"#\">\n                    <i class=\"fab fa-linkedin-in\"></i>\n                </a>\n            </li>\n            <li>\n                <a href=\"#\">\n                    <i class=\"fab fa-twitter\"></i>\n                </a>\n            </li>\n            <li>\n                <a href=\"#\">\n                    <i class=\"fab fa-youtube\"></i>\n                </a>\n            </li>\n        </ul>\n    </div>\n    <!-- Social Media End -->\n    <!-- Twitter Feed Start -->\n    <div class=\"sidebar-widget widget-twitter\">\n        <h5 class=\"widget-title\">Twitter Feed</h5>\n        <!-- Data -->\n        <div class=\"twitter-item d-flex align-items-start\" *ngFor=\"let item of feeds\">\n            <i class=\"fab fa-twitter custom-primary me-4 mt-2\"></i>\n            <div class=\"twitter-item-content\">\n                <p>{{item.tweet}}</p>\n                <strong>{{item.date}}</strong>\n            </div>\n        </div>\n        <!-- Data -->\n    </div>\n    <!-- Twitter Feed End -->\n    <!-- Instagram Start -->\n    <div class=\"sidebar-widget widget-ig\">\n        <h5 class=\"widget-title\">Instagram</h5>\n        <div class=\"row\">\n            <!-- Data -->\n            <div class=\"col-lg-4 col-md-4 col-sm-4 col-6\" *ngFor=\"let item of instagram | slice:0:9\">\n                <a href=\"#\" class=\"sigma_ig-item\">\n                    <img [src]=\"item.image\" alt=\"ig\">\n                </a>\n            </div>\n            <!-- Data -->\n        </div>\n    </div>\n    <!-- Instagram End -->\n    <!-- Popular Tags Start -->\n    <div class=\"sidebar-widget\">\n        <h5 class=\"widget-title\">Popular Tags</h5>\n        <div class=\"tagcloud\">\n            <!-- Data -->\n            <a routerLink=\"/blog/tag/{{item.id}}\" *ngFor=\"let item of tags\">{{item.title}}</a>\n            <!-- Data -->\n        </div>\n    </div>\n    <!-- Popular Tags End -->\n    <!-- Ad banner Start -->\n    <div class=\"sidebar-widget widget-ad p-0 border-0\">\n        <a href=\"#\">\n            <img src=\"assets/img/blog/ad.jpg\" alt=\"ad\">\n            <div>\n                <span>Add a Custom Text</span>\n                Add Banner here\n            </div>\n        </a>\n    </div>\n    <!-- Ad banner End -->\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-blog-grid',\n  templateUrl: './blog-grid.component.html',\n  styleUrls: ['./blog-grid.component.css']\n})\nexport class BlogGridComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"section\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-lg-4\">\n                <app-blog-sidebar></app-blog-sidebar>\n            </div>\n            <div class=\"col-lg-8\">\n                <div class=\"row\">\n                    <!-- Article Start -->\n                    <div class=\"col-md-6\" *ngFor=\"let item of blogblock | paginate: { itemsPerPage: 8, currentPage: page }\">\n                        <article class=\"sigma_post\">\n                            <div class=\"sigma_post-thumb\">\n                                <a routerLink=\"/blog-details/{{item.id}}\">\n                                    <img [src]=\"item.image[0]\" [alt]=\"item.title\">\n                                </a>\n                            </div>\n                            <div class=\"sigma_post-body\">\n                                <div class=\"sigma_post-meta\">\n                                    <a routerLink=\"/blog-details/{{item.id}}\" class=\"sigma_post-date\"> <i class=\"far fa-calendar\"></i>{{item.postdate}}</a>\n                                </div>\n                                <h5> <a routerLink=\"/blog-details/{{item.id}}\">{{item.title}}</a> </h5>\n                                <div class=\"sigma_post-single-author\" *ngFor=\"let author of []\">\n                                    <img [src]=\"author.image\" [alt]=\"author.name\">\n                                    <div class=\"sigma_post-single-author-content\">\n                                        By <p>{{author.name}}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </article>\n                    </div>\n                    <!-- Article End -->\n                </div>\n                <!-- Pagination Start -->\n                <pagination-controls (pageChange)=\"page = $event\" responsive=\"true\" previousLabel=\"<\" nextLabel=\">\">\n                </pagination-controls>\n                <!-- Pagination End -->\n            </div>\n        </div>\n    </div>\n</div>\n","\n    <pagination-template  #p=\"paginationApi\"\n                         [id]=\"id\"\n                         [maxSize]=\"maxSize\"\n                         (pageChange)=\"pageChange.emit($event)\"\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\n    <ul class=\"ngx-pagination\"\n        [attr.aria-label]=\"screenReaderPaginationLabel\" \n        [class.responsive]=\"responsive\"\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\n\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\" [attr.aria-label]=\"previousLabel + ' ' + screenReaderPageLabel\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isFirstPage()\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li> \n\n        <li class=\"small-screen\">\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\n        </li>\n\n        <li [class.current]=\"p.getCurrent() === page.value\" \n            [class.ellipsis]=\"page.label === '...'\"\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\n            </a>\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \n            </ng-container>\n        </li>\n\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\" [attr.aria-label]=\"nextLabel + ' ' + screenReaderPageLabel\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isLastPage()\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n\n    </ul>\n    </pagination-template>\n    ","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\nimport { BlogGridRoutingModule } from './blog-grid-routing.module';\nimport { BlogGridComponent } from './blog-grid.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ContentComponent } from './content/content.component';\n\n\n@NgModule({\n  declarations: [\n    BlogGridComponent,\n    ContentComponent\n  ],\n  imports: [\n    CommonModule,\n    BlogGridRoutingModule,\n    SharedModule,\n    NgbModule,\n    NgxPaginationModule\n  ]\n})\nexport class BlogGridModule { }\n","<app-header-three></app-header-three>\n<app-breadcrumbs [titulo]=\"'Blog Details'\" [descricao]=\"'Descricao'\" [img]=\"'url(assets/img/subheader.jpg)'\"></app-breadcrumbs>\n<app-content></app-content>\n<footer class=\"sigma_footer footer-2 sigma_footer-dark\">\n    <app-footer></app-footer>\n</footer>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BlogGridComponent } from './blog-grid.component';\n\nconst routes: Routes = [{ path: '', component: BlogGridComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BlogGridRoutingModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = /** @class */ (function () {\r\n    function PaginationService() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    PaginationService.prototype.register = function (instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        }\r\n        else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    };\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    PaginationService.prototype.updateInstance = function (instance) {\r\n        var changed = false;\r\n        for (var prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    PaginationService.prototype.getCurrentPage = function (id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    PaginationService.prototype.setCurrentPage = function (id, page) {\r\n        if (this.instances[id]) {\r\n            var instance = this.instances[id];\r\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    PaginationService.prototype.getInstance = function (id) {\r\n        if (id === void 0) { id = this.DEFAULT_ID; }\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    };\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    PaginationService.prototype.clone = function (obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    return PaginationService;\r\n}());\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nvar PaginatePipe = /** @class */ (function () {\r\n    function PaginatePipe(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    PaginatePipe.prototype.transform = function (collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            var _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        var instance = this.createInstance(collection, args);\r\n        var id = instance.id;\r\n        var start, end;\r\n        var perPage = instance.itemsPerPage;\r\n        var emitChange = this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                var slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n            return collection;\r\n        }\r\n    };\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    PaginatePipe.prototype.createInstance = function (collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    };\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    PaginatePipe.prototype.checkConfig = function (config) {\r\n        var required = ['itemsPerPage', 'currentPage'];\r\n        var missing = required.filter(function (prop) { return !(prop in config); });\r\n        if (0 < missing.length) {\r\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\r\n        }\r\n    };\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection: collection,\r\n            size: collection.length,\r\n            slice: slice,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\r\n        var state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        var isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\r\n    };\r\n    PaginatePipe = __decorate$1([\r\n        Pipe({\r\n            name: 'paginate',\r\n            pure: false\r\n        }),\r\n        __metadata(\"design:paramtypes\", [PaginationService])\r\n    ], PaginatePipe);\r\n    return PaginatePipe;\r\n}());\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\"\\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages; trackBy: trackByIndex\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\r\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\\n.ngx-pagination .small-screen {\\n  display: none; }\\n@media screen and (max-width: 601px) {\\n  .ngx-pagination.responsive .small-screen {\\n    display: inline-block; } \\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\\n    display: none; }\\n}\\n  \";\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nvar PaginationControlsComponent = /** @class */ (function () {\r\n    function PaginationControlsComponent() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = \"You're on page\";\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\r\n        get: function () {\r\n            return this._directionLinks;\r\n        },\r\n        set: function (value) {\r\n            this._directionLinks = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\r\n        get: function () {\r\n            return this._autoHide;\r\n        },\r\n        set: function (value) {\r\n            this._autoHide = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"responsive\", {\r\n        get: function () {\r\n            return this._responsive;\r\n        },\r\n        set: function (value) {\r\n            this._responsive = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PaginationControlsComponent.prototype.trackByIndex = function (index) {\r\n        return index;\r\n    };\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"id\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Number)\r\n    ], PaginationControlsComponent.prototype, \"maxSize\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"directionLinks\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"autoHide\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"responsive\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"previousLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"nextLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderPaginationLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderPageLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderCurrentLabel\", void 0);\r\n    __decorate$2([\r\n        Output(),\r\n        __metadata$1(\"design:type\", EventEmitter)\r\n    ], PaginationControlsComponent.prototype, \"pageChange\", void 0);\r\n    __decorate$2([\r\n        Output(),\r\n        __metadata$1(\"design:type\", EventEmitter)\r\n    ], PaginationControlsComponent.prototype, \"pageBoundsCorrection\", void 0);\r\n    PaginationControlsComponent = __decorate$2([\r\n        Component({\r\n            selector: 'pagination-controls',\r\n            template: DEFAULT_TEMPLATE,\r\n            styles: [DEFAULT_STYLES],\r\n            changeDetection: ChangeDetectionStrategy.OnPush,\r\n            encapsulation: ViewEncapsulation.None\r\n        })\r\n    ], PaginationControlsComponent);\r\n    return PaginationControlsComponent;\r\n}());\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nvar PaginationControlsDirective = /** @class */ (function () {\r\n    function PaginationControlsDirective(service, changeDetectorRef) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(function (id) {\r\n            if (_this.id === id) {\r\n                _this.updatePageLinks();\r\n                _this.changeDetectorRef.markForCheck();\r\n                _this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    PaginationControlsDirective.prototype.ngOnInit = function () {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\r\n        this.changeSub.unsubscribe();\r\n    };\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    PaginationControlsDirective.prototype.previous = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    };\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    PaginationControlsDirective.prototype.next = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    };\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    PaginationControlsDirective.prototype.isFirstPage = function () {\r\n        return this.getCurrent() === 1;\r\n    };\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    PaginationControlsDirective.prototype.isLastPage = function () {\r\n        return this.getLastPage() === this.getCurrent();\r\n    };\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\r\n        this.pageChange.emit(page);\r\n    };\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.getCurrent = function () {\r\n        return this.service.getCurrentPage(this.id);\r\n    };\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    PaginationControlsDirective.prototype.getLastPage = function () {\r\n        var inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    };\r\n    PaginationControlsDirective.prototype.getTotalItems = function () {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    };\r\n    PaginationControlsDirective.prototype.checkValidId = function () {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\r\n        var _this = this;\r\n        var inst = this.service.getInstance(this.id);\r\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(function () {\r\n                _this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    };\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\r\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    };\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        var pages = [];\r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        var totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        var isStart = currentPage <= halfWay;\r\n        var isEnd = totalPages - halfWay < currentPage;\r\n        var isMiddle = !isStart && !isEnd;\r\n        var ellipsesNeeded = paginationRange < totalPages;\r\n        var i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            var label = void 0;\r\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    };\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    };\r\n    __decorate$3([\r\n        Input(),\r\n        __metadata$2(\"design:type\", String)\r\n    ], PaginationControlsDirective.prototype, \"id\", void 0);\r\n    __decorate$3([\r\n        Input(),\r\n        __metadata$2(\"design:type\", Number)\r\n    ], PaginationControlsDirective.prototype, \"maxSize\", void 0);\r\n    __decorate$3([\r\n        Output(),\r\n        __metadata$2(\"design:type\", EventEmitter)\r\n    ], PaginationControlsDirective.prototype, \"pageChange\", void 0);\r\n    __decorate$3([\r\n        Output(),\r\n        __metadata$2(\"design:type\", EventEmitter)\r\n    ], PaginationControlsDirective.prototype, \"pageBoundsCorrection\", void 0);\r\n    PaginationControlsDirective = __decorate$3([\r\n        Directive({\r\n            selector: 'pagination-template,[pagination-template]',\r\n            exportAs: 'paginationApi'\r\n        }),\r\n        __metadata$2(\"design:paramtypes\", [PaginationService,\r\n            ChangeDetectorRef])\r\n    ], PaginationControlsDirective);\r\n    return PaginationControlsDirective;\r\n}());\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar NgxPaginationModule = /** @class */ (function () {\r\n    function NgxPaginationModule() {\r\n    }\r\n    NgxPaginationModule = __decorate([\r\n        NgModule({\r\n            imports: [CommonModule],\r\n            declarations: [\r\n                PaginatePipe,\r\n                PaginationControlsComponent,\r\n                PaginationControlsDirective\r\n            ],\r\n            providers: [PaginationService],\r\n            exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n        })\r\n    ], NgxPaginationModule);\r\n    return NgxPaginationModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n","import { Component } from '@angular/core';\nimport { BlogHelperService } from 'src/app/components/helper/blog/blog-helper.service';\n\n@Component({\n  selector: 'app-content',\n  templateUrl: './content.component.html',\n  styleUrls: ['./content.component.css']\n})\nexport class ContentComponent extends BlogHelperService {\n}\n"],"sourceRoot":"webpack:///"}