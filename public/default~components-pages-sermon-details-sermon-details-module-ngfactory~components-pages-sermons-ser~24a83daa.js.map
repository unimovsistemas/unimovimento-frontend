{"version":3,"sources":["./src/app/components/helper/sermon/sermon-helper.service.ts"],"names":[],"mappings":"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","file":"default~components-pages-sermon-details-sermon-details-module-ngfactory~components-pages-sermons-ser~24a83daa.js","sourcesContent":["import { Injectable, AfterContentInit, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport authors from '../../data/volunteer/volunteer.json';\nimport sermon from '../../data/sermon/sermon.json';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { PlyrComponent } from 'ngx-plyr';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SermonHelperService implements AfterContentInit, OnInit {\n  // pagination\n  page: number = 1;\n  // Sermon\n  public sermonblock = sermon;\n  public sermondetails = sermon;\n  // Authors\n  public author = authors;\n  constructor(private route: ActivatedRoute, private sanitizer: DomSanitizer) { }\n  // Author\n  public getAuthor(items: string | any[]) {\n    var elems = authors.filter((item: { id: string; }) => {\n      return items.includes(item.id)\n    });\n    return elems;\n  }\n  // Sermon Details\n  public setSermon(id: any) {\n    this.sermondetails = sermon.filter((item: { id: any; }) => { return item.id == id });\n  }\n  // Recent post\n  public changeToMonth(month: string | number | any) {\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return months[month];\n  }\n  public setDemoDate() {\n    var today = new Date();\n    this.sermonblock.slice(0, 3).map((item: { timestamp: number; sermondate: string; }) => (\n      item.timestamp = today.getTime() - (3 * 24 * 60 * 60 * 1000),\n      // Remove this date on your live demo. This is only used for preview purposed. Your date should actually be updated\n      // in the sermon.json object\n      item.sermondate = `${today.getDate() - 2}  ${this.changeToMonth(today.getMonth())}, ${today.getFullYear()}`\n    ));\n  }\n  public getNextSermon() {\n    var elems = sermon.filter((item: { timestamp: number | any; sermondate: string | number | Date; }) => {\n      return item.timestamp < new Date(item.sermondate);\n    });\n    return elems;\n  }\n  // Filter\n  // Author Filter\n  public setAuthor(id: any) {\n    this.author = id;\n  }\n  public getAuthorSermon() {\n    return this.author;\n  }\n  public getSermonsByAuthors(authorId: string) {\n    return this.sermonblock = sermon.filter((item: { author: number[]; }) => { return item.author.includes(parseInt(authorId)) });\n  }\n  // Fetch All filter\n  public setSermons() {\n    var postsByAuthor = this.getAuthorSermon() != undefined ? this.getSermonsByAuthors(this.getAuthorSermon()) : '';\n    if ((postsByAuthor != '' || postsByAuthor != undefined || postsByAuthor != null) && postsByAuthor.length > 0) {\n      this.sermonblock = postsByAuthor;\n    }\n  }\n  ngAfterContentInit(): void {\n    this.setAuthor(this.route.snapshot.params.authorId);\n    this.setSermons();\n    this.setSermon(this.route.snapshot.params.id);\n  }\n  ngOnInit(): void {\n    this.setDemoDate();\n  }\n  // Social Share\n  public pageUrl = window.location.href;\n  public socialShare(title: string) {\n    var socialIcons = [\n      {\n        title: \"facebook\",\n        iconClass: \"fab fa-facebook-f\",\n        iconStyle: \"fb\",\n        link: \"https://www.facebook.com/sharer/sharer.php?u=\" + encodeURIComponent(this.pageUrl) + \"\"\n      },\n      {\n        title: \"twitter\",\n        iconClass: \"fab fa-twitter\",\n        iconStyle: \"tw\",\n        link: \"http://twitter.com/intent/tweet?text=\" + encodeURIComponent(title) + \"&\" + encodeURIComponent(this.pageUrl) + \"\"\n      },\n      {\n        title: \"linkedin\",\n        iconClass: \"fab fa-linkedin-in\",\n        iconStyle: \"ln\",\n        link: \"https://www.linkedin.com/shareArticle?mini=true&url=\" + encodeURIComponent(this.pageUrl) + \"&title=\" + encodeURIComponent(title) + \"\"\n      },\n      {\n        title: \"pinterest\",\n        iconClass: \"fab fa-pinterest-p\",\n        iconStyle: \"gg\",\n        link: \"http://pinterest.com/pin/create/button/?url=\" + encodeURIComponent(this.pageUrl) + \"\"\n      }\n    ];\n    return socialIcons;\n  }\n  openSocialPopup(social: any) {\n    window.open(social.link, \"MsgWindow\", \"width=600,height=600\")\n  }\n  // sanitize url\n  public sanitnizeAudioURL(url: string) {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url)\n  }\n  // get the component instance to have access to plyr instance\n  @ViewChild(PlyrComponent)\n  plyr: PlyrComponent | undefined;\n\n  // or get it from plyrInit event\n  player: Plyr | any;\n\n  audioSources: Plyr.Source[] = [\n    {\n      src: 'https://cdn.plyr.io/static/demo/Kishi_Bashi_-_It_All_Began_With_a_Burst.mp3',\n      type: 'audio/mp3',\n    }\n  ];\n  play(): void {\n    this.player.play(); // or this.plyr.player.play()\n  } \n  pause(): void {\n    this.player.stop(); // or this.plyr.player.play()\n  }\n}\n"],"sourceRoot":"webpack:///"}